{"version":3,"sources":["components/tagsNavBar/tagsNavBar.js","components/editor/editor.js","containers/cms/createPost.js","containers/cms/viewPosts.js","containers/cms/viewTags.js","components/cmsManagerNav/cmsMainScreenToolBar.js","components/modals/Modal.js","utils/helperFunctions.js","containers/cms/cmsManager.js","Pages/cms/cms.js","actions/utils.js","actions/userActions.js","utils/enums.js"],"names":["tagsNavBar","props","tags","clickedTags","className","map","tag","index","variant","includes","id","size","onClick","name","Editor","state","editorHtml","editorValue","theme","quill","handleChange","bind","imageHandler","modules","toolbar","container","header","font","list","handlers","image","clipboard","matchVisual","html","this","setState","onChangeEditor","onInsertImage","ref","el","onChange","value","isEditorToClear","formats","bounds","placeholder","React","Component","CreatePost","type","title","event","onChangeTitle","target","htmlValue","clearValue","getHtmlValue","input","document","createElement","setAttribute","click","onchange","a","file","files","formData","FormData","append","range","getEditor","getSelection","setSelection","uploadImageToServer","img","insertEmbed","ViewPosts","postHeaders","posts","viewMode","filtered","CMSVIEWMODES","PUBLISHED","forEach","post","published","push","DRAFTS","filterPosts","checkedItems","item","onCheckbox","checked","Table","responsive","i","toString","publichedAt","createdAt","updatedAt","summary","tagsToShow","checkedTags","onTagsCheckbox","cmsToolBar","activePane","option","toggleBackPreviewButtonName","createButtonsOptions","onclick","onSaveEditor","onPreviewEditor","onClearEditor","onCreateNewEntry","displayButtonsOptions","onSeeAll","onSeeDrafts","onSeePublished","onPublish","onEdit","onDelete","onUnPublish","tagsButtonsOptions","onShowAllTags","onSaveTag","onDeleteTag","onCreateNewTag","Button","modal","modalType","showStatus","modalTitle","text","modalText","Modal","show","Header","Title","Body","Footer","onConfirm","onDeny","CmsManager","activeTab","CMSTABS","CREATE","postsToShow","editor","postTitle","editorToClear","ALL","isEdit","entryEditId","modalStatus","tagMode","tagInput","seoTagsInput","toggleView","handleSaveEditorToState","handleCloseModal","handleSaveEditor","handleSaveTitleToState","handleClearEditor","handlePreviewEditor","handleCreateNewEntry","handleOnTagClick","handlePublish","handleEdit","handleDelete","handleSeeAll","handleSeeDrafts","handleSeePublished","handleUnPublish","handleCheckbox","handleShowAllTags","handleCreateNewTag","handleSaveNewTag","handleDeleteTags","handleTagsCheckbox","handleTagEdit","raiseTagsModal","handleConfirm","handleDeny","closeModal","tagsInput","createRef","getAllTags","body","pane","getBlogPostHeaders","headers","error","current","console","log","arr","seoTags","length","split","trim","updateBlog","response","saveBlog","PREVIEW","publishEntries","handleListDataRender","unPublishEntries","getSingleBlogEntry","reply","hasOwnProperty","content","tagsToDisplay","join","performDelete","deleteEntries","checkedItem","checkedStatus","newCheckedItems","indexOf","splice","errorText","saveNewTag","deleteTag","checkedTag","newCheckedtags","tagId","newArray","DISPLAY","TAGS_MANAGER","htmlFor","defaultValue","Cms","getBaseFrontUrl","process","REACT_APP_ENV","REACT_APP_PROD_FRONTEND","getBaseUrl","window","location","origin","login","username","password","data","baseUrl","url","fetch","method","JSON","stringify","json","token","auth","localStorage","setItem","getItem","removeItem","msg","signup","newUser","newEntry","newBlogEntry","updatedEntry","blogId","entryToUpdate","entryId","result","returnData","config","axios","then","res","imageUrl","get","resp","blogIds","handleApiBoolReply","status","PAGINATIONTYPE","FIRST","NEXT","LAST","PREV","NUMBER","ELLIPSIS"],"mappings":"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","file":"static/js/11.16a65e6a.chunk.js","sourcesContent":["import Button from \"react-bootstrap/Button\";\r\nimport \"./tagsNavBar.scss\";\r\nexport default function tagsNavBar(props) {\r\n  const tags = props.tags;\r\n  const clickedTags = props.clickedTags ? props.clickedTags : [];\r\n  return (\r\n    <div className=\"tags-main\">\r\n      {tags.map((tag, index) => {\r\n        return (\r\n          <Button\r\n            key={tag.id}\r\n            className=\"tag-button\"\r\n            variant={clickedTags.includes(tag.id) ? \"success\" : \"primary\"}\r\n            size=\"sm\"\r\n            onClick={() => props.onClick(tag.id)}\r\n          >\r\n            {tag.name}\r\n          </Button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"react-quill/dist/quill.bubble.css\";\r\nimport \"react-quill/dist/quill.core.css\";\r\n// const userActions = require (\"../../actions/userActions\")\r\n\r\nimport { uploadImageToServer } from \"../../actions/userActions\";\r\n\r\nclass Editor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      editorHtml: props.editorValue,\r\n      theme: \"snow\",\r\n    };\r\n    this.quill = null;\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.imageHandler = this.imageHandler.bind(this);\r\n    this.modules = {\r\n      toolbar: {\r\n        container: [\r\n          [\r\n            { header: \"1\" },\r\n            { header: \"2\" },\r\n            { header: [3, 4, 5, 6] },\r\n            { font: [] },\r\n          ],\r\n          [{ size: [] }],\r\n          [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n          [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n          [\"link\", \"image\", \"video\"],\r\n          [\"clean\"],\r\n          [\"code-block\"],\r\n        ],\r\n        handlers: {\r\n          image: this.imageHandler,\r\n        },\r\n      },\r\n      clipboard: {\r\n        matchVisual: false,\r\n      },\r\n    };\r\n  }\r\n  handleChange(html) {\r\n    this.setState({ editorHtml: html });\r\n    this.props.onChangeEditor(html, false);\r\n  }\r\n  imageHandler() {\r\n    this.props.onInsertImage(this.quill);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <ReactQuill\r\n          ref={(el) => {\r\n            this.quill = el;\r\n          }}\r\n          theme={this.state.theme}\r\n          onChange={this.handleChange}\r\n          value={this.props.isEditorToClear ? \"\" : this.state.editorHtml}\r\n          modules={this.modules}\r\n          formats={Editor.formats}\r\n          bounds={\".app\"}\r\n          placeholder={\"Start typing here\"}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n/*\r\n * Quill modules to attach to editor\r\n * See https://quilljs.com/docs/modules/ for complete options\r\n */\r\n\r\nEditor.formats = [\r\n  \"header\",\r\n  \"font\",\r\n  \"size\",\r\n  \"bold\",\r\n  \"italic\",\r\n  \"underline\",\r\n  \"strike\",\r\n  \"blockquote\",\r\n  \"list\",\r\n  \"bullet\",\r\n  \"indent\",\r\n  \"link\",\r\n  \"image\",\r\n  \"video\",\r\n];\r\n\r\n/*\r\n * PropType validation\r\n */\r\nEditor.propTypes = {\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useState } from \"react\";\r\nimport \"./cmsComponent.scss\";\r\nimport Editor from \"../../components/editor/editor\";\r\nimport { uploadImageToServer } from \"../../actions/userActions\";\r\n\r\n\r\nexport default function CreatePost(props) {\r\n  const getHtmlValue = (htmlValue, clearValue) => {\r\n    props.onChangeEditor(htmlValue, clearValue);\r\n  };\r\n  const handleTitle = (event) => {\r\n    props.onChangeTitle(event.target.value);\r\n  };\r\n\r\n  const editorValue = props.editorValue\r\n  const imageHandler = (quill) => {\r\n    const input = document.createElement(\"input\");\r\n    input.setAttribute(\"type\", \"file\");\r\n    input.setAttribute(\"accept\", \"image/*\");\r\n    input.click();\r\n    input.onchange = async () => {\r\n      const file = input.files[0];\r\n      const formData = new FormData();\r\n      formData.append(\"image\", file);\r\n      // Save current cursor state\r\n      const range = quill.getEditor().getSelection(true);\r\n      // // Move cursor to right side of image (easier to continue typing)\r\n      quill.getEditor().setSelection(range.index + 1);\r\n      // const img = await uploadImageToBucket(this.state.uploadedPictures, this.state.title)\r\n\r\n      let img = await uploadImageToServer(formData);\r\n\r\n      quill.getEditor().insertEmbed(range.index, \"image\", img);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-75 m-auto\">\r\n      <div className=\"w-50 pb-3 pt-5 m-auto\">\r\n        <span className=\"pr-3\">\r\n          <strong>Title:</strong>\r\n        </span>\r\n        <input\r\n          type=\"text\"\r\n          name=\"entryName\"\r\n          className=\"w-100\"\r\n          value={props.title}\r\n          onChange={handleTitle}\r\n        ></input>\r\n      </div>\r\n      <span className=\"pr-3\">\r\n        <strong>Blog:</strong>\r\n      </span>\r\n      <Editor\r\n        onChangeEditor={(htmlValue, clearValue) =>\r\n          getHtmlValue(htmlValue, clearValue)\r\n        }\r\n        onInsertImage={(quill) => imageHandler(quill)}\r\n        isEditorToClear={props.isEditorToClear}\r\n        editorValue = {editorValue}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n//bootstrap items\r\nimport Table from \"react-bootstrap/Table\";\r\n//style\r\nimport \"./cmsComponent.scss\";\r\n//utilites\r\nimport { CMSVIEWMODES } from \"../../utils/enums\";\r\n\r\nconst filterPosts = (posts, viewMode) => {\r\n  let filtered = [];\r\n  switch (viewMode) {\r\n    case CMSVIEWMODES.PUBLISHED:\r\n      posts.forEach((post) => (post.published ? filtered.push(post) : \"\"));\r\n      break;\r\n    case CMSVIEWMODES.DRAFTS:\r\n      posts.forEach((post) => (post.published ? \"\" : filtered.push(post)));\r\n      break;\r\n    default:\r\n      return posts;\r\n  }\r\n  return filtered;\r\n};\r\n\r\nexport default function ViewPosts(props) {\r\n  const postHeaders = filterPosts(props.postHeaders, props.viewMode);\r\n  const checkedItems = props.checkedItems;\r\n  const handleChange = (event) => {\r\n    const item = event.target;\r\n    props.onCheckbox(item.name, item.checked);\r\n  };\r\n  return (\r\n    <div className=\"w-75 m-auto\">\r\n      <Table responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>id</th>\r\n            <th>Title</th>\r\n            <th>Published</th>\r\n            <th>Published At</th>\r\n            <th>Created At</th>\r\n            <th>updated At</th>\r\n            <th>summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {postHeaders.map(function (item, i) {\r\n            return (\r\n              <tr key={i} value={item.id}>\r\n                <td>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name={item.id}\r\n                    onChange={handleChange}\r\n                    checked={\r\n                      checkedItems.includes(item.id.toString()) ? true : false\r\n                    }\r\n                  ></input>\r\n                </td>\r\n                <td>{item.id}</td>\r\n                <td>{item.title}</td>\r\n                <td>{item.published ? \"Published\" : \"Not Published\"}</td>\r\n                <td>{item.publichedAt}</td>\r\n                <td>{item.createdAt}</td>\r\n                <td>{item.updatedAt}</td>\r\n                <td>{item.summary}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n//bootstrap items\r\nimport Table from \"react-bootstrap/Table\";\r\n//style\r\nimport \"./cmsComponent.scss\";\r\n//utilites\r\n\r\nexport default function ViewPosts(props) {\r\n  const tags = props.tagsToShow;\r\n  const checkedItems = props.checkedTags;\r\n  const handleChange = (event) => {\r\n    const item = event.target;\r\n    props.onTagsCheckbox(item.name, item.checked);\r\n  };\r\n  return (\r\n    <div className=\"w-75 m-auto\">\r\n      <Table responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>ID</th>\r\n            <th>Tag Name</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tags.map(function (item, i) {\r\n            return (\r\n              <tr key={i} value={item.id}>\r\n                <td>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name={item.id}\r\n                    onChange={handleChange}\r\n                    checked={\r\n                      checkedItems.includes(item.id.toString()) ? true : false\r\n                    }\r\n                  ></input>\r\n                </td>\r\n                <td>{item.id}</td>\r\n                <td>{item.name}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\n//styles\r\nimport \"./cmsToolBar.scss\";\r\n\r\n//boostrap items\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function cmsToolBar(props) {\r\n  const activePane = props.option;\r\n  const toggleBackPreviewButtonName =\r\n    activePane === \"create\" ? \"Preivew\" : \"Back\";\r\n  const createButtonsOptions = [\r\n    { size: \"sm\", name: \"Save\", onclick: props.onSaveEditor },\r\n    {\r\n      size: \"sm\",\r\n      name: toggleBackPreviewButtonName,\r\n      onclick: props.onPreviewEditor,\r\n    },\r\n    { size: \"sm\", name: \"Clear Editor\", onclick: props.onClearEditor },\r\n    { size: \"sm\", name: \"New Entry\", onclick: props.onCreateNewEntry },\r\n  ];\r\n\r\n  const displayButtonsOptions = [\r\n    { size: \"sm\", name: \"See All\", onclick: props.onSeeAll },\r\n    { size: \"sm\", name: \"See Drafts\", onclick: props.onSeeDrafts },\r\n    { size: \"sm\", name: \"See Published\", onclick: props.onSeePublished },\r\n    { size: \"sm\", name: \"Publish\", onclick: props.onPublish },\r\n    { size: \"sm\", name: \"Edit\", onclick: props.onEdit },\r\n    { size: \"sm\", name: \"Delete\", onclick: props.onDelete },\r\n    { size: \"sm\", name: \"Unpublish\", onclick: props.onUnPublish },\r\n  ];\r\n  const tagsButtonsOptions = [\r\n    { size: \"sm\", name: \"Show All\", onclick: props.onShowAllTags },\r\n    { size: \"sm\", name: \"Save Tag\", onclick: props.onSaveTag },\r\n    { size: \"sm\", name: \"Delete Tags\", onclick: props.onDeleteTag },\r\n    { size: \"sm\", name: \"Create Tag\", onclick: props.onCreateNewTag },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"toolbarWrapper\">\r\n      {activePane === \"create\" || activePane === \"preview\" ? (\r\n        <>\r\n          {createButtonsOptions.map(function (item, i) {\r\n            return (\r\n              <Button\r\n                key={\"btn\" + item.name}\r\n                size={item.size}\r\n                className=\"m-1\"\r\n                onClick={() => item.onclick()}\r\n              >\r\n                {item.name}\r\n              </Button>\r\n            );\r\n          })}\r\n        </>\r\n      ) : activePane === \"display\" ? (\r\n        <>\r\n          {displayButtonsOptions.map(function (item, i) {\r\n            return (\r\n              <Button\r\n                key={\"btn\" + item.name}\r\n                size={item.size}\r\n                className=\"m-1\"\r\n                onClick={() => item.onclick()}\r\n              >\r\n                {item.name}\r\n              </Button>\r\n            );\r\n          })}\r\n        </>\r\n      ) : activePane === \"tags\" ? (\r\n        <>\r\n        {tagsButtonsOptions.map(function (item, i) {\r\n          return (\r\n            <Button\r\n              key={\"btn\" + item.name}\r\n              size={item.size}\r\n              className=\"m-1\"\r\n              onClick={() => item.onclick()}\r\n            >\r\n              {item.name}\r\n            </Button>\r\n          );\r\n        })}\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nexport default function modal(props) {\r\n  const type = props.modalType;\r\n  const showStatus = props.showStatus;\r\n  const title = props.modalTitle;\r\n  const text = props.modalText;\r\n\r\n\r\n  return (\r\n    <Modal show={showStatus}>\r\n      <Modal.Header>\r\n        <Modal.Title>{title}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>{text}</p>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={()=>props.onConfirm(type)}>\r\n          Confirm\r\n        </Button>\r\n        {type !== \"error\" ? (\r\n          <Button variant=\"info\" onClick={()=>props.onDeny()}>\r\n            Deny\r\n          </Button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","const stringToArray = (arr) => {\r\n  return arr.length >= 1\r\n    ? arr.split(\",\").map(function (tag) {\r\n        return tag.trim();\r\n      })\r\n    : \"\";\r\n};\r\nexport { stringToArray };\r\n","import React, { Fragment, Component } from \"react\";\r\n//containers\r\nimport CreatePost from \"./createPost\";\r\nimport ViewPosts from \"./viewPosts\";\r\nimport ViewTags from \"./viewTags\";\r\nimport TagsNavBar from \"../../components/tagsNavBar/tagsNavBar\";\r\n//components\r\nimport CmsMainScreenToolBar from \"../../components/cmsManagerNav/cmsMainScreenToolBar\";\r\nimport Modal from \"../../components/modals/Modal\";\r\n//boostrap items\r\nimport Button from \"react-bootstrap/Button\";\r\n//styles\r\nimport \"./cmsComponent.scss\";\r\n//actions\r\nimport {\r\n  getBlogPostHeaders,\r\n  getSingleBlogEntry,\r\n  saveBlog,\r\n  deleteEntries,\r\n  publishEntries,\r\n  unPublishEntries,\r\n  updateBlog,\r\n  getAllTags,\r\n  saveNewTag,\r\n  deleteTag,\r\n} from \"../../actions/userActions\";\r\n//utilites\r\nimport { CMSVIEWMODES, CMSTABS } from \"../../utils/enums\";\r\nimport { stringToArray } from \"../../utils/helperFunctions\";\r\nclass CmsManager extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //state\r\n    this.state = {\r\n      activeTab: CMSTABS.CREATE,\r\n      postsToShow: [],\r\n      editor: \"\",\r\n      postTitle: \"\",\r\n      editorToClear: false,\r\n      checkedItems: [],\r\n      viewMode: CMSVIEWMODES.ALL,\r\n      isEdit: false,\r\n      entryEditId: \"\",\r\n      modalStatus: false,\r\n      modalType: \"\",\r\n      modalTitle: \"\",\r\n      modalText: \"\",\r\n      tags: [],\r\n      checkedTags: [],\r\n      tagMode: \"view\",\r\n      tagInput: \"\",\r\n      seoTagsInput: \"\",\r\n    };\r\n    //binds\r\n    this.toggleView = this.toggleView.bind(this);\r\n    this.handleSaveEditorToState = this.handleSaveEditorToState.bind(this);\r\n    this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    //create tab binds\r\n    this.handleSaveEditor = this.handleSaveEditor.bind(this);\r\n    this.handleSaveTitleToState = this.handleSaveTitleToState.bind(this);\r\n    this.handleClearEditor = this.handleClearEditor.bind(this);\r\n    this.handlePreviewEditor = this.handlePreviewEditor.bind(this);\r\n    this.handleCreateNewEntry = this.handleCreateNewEntry.bind(this);\r\n    this.handleOnTagClick = this.handleOnTagClick.bind(this);\r\n\r\n    //Display Tab Binds\r\n    this.handlePublish = this.handlePublish.bind(this);\r\n    this.handleEdit = this.handleEdit.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleSeeAll = this.handleSeeAll.bind(this);\r\n    this.handleSeeDrafts = this.handleSeeDrafts.bind(this);\r\n    this.handleSeePublished = this.handleSeePublished.bind(this);\r\n    this.handleUnPublish = this.handleUnPublish.bind(this);\r\n    this.handleCheckbox = this.handleCheckbox.bind(this);\r\n    //tags binds\r\n    this.handleShowAllTags = this.handleShowAllTags.bind(this);\r\n    this.handleCreateNewTag = this.handleCreateNewTag.bind(this);\r\n    this.handleSaveNewTag = this.handleSaveNewTag.bind(this);\r\n    this.handleDeleteTags = this.handleDeleteTags.bind(this);\r\n    this.handleTagsCheckbox = this.handleTagsCheckbox.bind(this);\r\n    this.handleTagEdit = this.handleTagEdit.bind(this);\r\n    this.raiseTagsModal = this.raiseTagsModal.bind(this);\r\n    //modal binds\r\n    this.handleConfirm = this.handleConfirm.bind(this);\r\n    this.handleDeny = this.handleDeny.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n    //refs\r\n    this.tagsInput = React.createRef();\r\n    this.seoTagsInput = React.createRef();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const tags = await getAllTags();\r\n    this.setState({\r\n      tags: tags.body,\r\n      checkedTags: [],\r\n    });\r\n  }\r\n\r\n  async toggleView(pane) {\r\n    const headers = await getBlogPostHeaders();\r\n    if (headers.error === \"error\") {\r\n      this.setState({\r\n        activeTab: pane,\r\n        modalStatus: true,\r\n        modalTitle: \"Error\",\r\n        modalText: \"Server error\",\r\n        modalType: \"error\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        activeTab: pane,\r\n        postsToShow: headers.body,\r\n      });\r\n    }\r\n  }\r\n  handleCreateNewEntry() {\r\n    this.tagsInput.current.value = \"food\";\r\n    this.seoTagsInput.current.value = \"food\";\r\n    this.setState({\r\n      editor: \"\",\r\n      postTitle: \"\",\r\n      editorToClear: true,\r\n      checkedItems: [],\r\n      isEdit: false,\r\n      entryEditId: \"\",\r\n    });\r\n  }\r\n  handleCloseModal() {\r\n    this.setState({\r\n      modalStatus: false,\r\n    });\r\n  }\r\n  handleSaveTitleToState(title) {\r\n    this.setState({\r\n      postTitle: title,\r\n    });\r\n  }\r\n  handleSaveEditorToState(value) {\r\n    this.setState({\r\n      editor: value,\r\n      editorToClear: false,\r\n    });\r\n  }\r\n\r\n  async handleSaveEditor() {\r\n    const tags = this.state.checkedTags;\r\n    console.log(tags);\r\n    const seoTags = stringToArray(this.seoTagsInput.current.value);\r\n    let response;\r\n    if (this.state.isEdit) {\r\n      response = await updateBlog(\r\n        this.state.editor,\r\n        this.state.postTitle,\r\n        this.state.entryEditId,\r\n        tags,\r\n        seoTags\r\n      );\r\n    } else {\r\n      response = await saveBlog(\r\n        this.state.editor,\r\n        this.state.postTitle,\r\n        tags,\r\n        seoTags\r\n      );\r\n    }\r\n\r\n    if (response === true) {\r\n      this.setState({\r\n        modalStatus: true,\r\n        modalTitle: \"Success\",\r\n        modalText: \"YOu have succeeded\",\r\n        editor: \"\",\r\n        postTitle: \"\",\r\n        isEdit: false,\r\n        entryEditId: \"\",\r\n        checkedTags: [],\r\n      });\r\n    } else {\r\n      this.setState({\r\n        modalStatus: true,\r\n        modalTitle: \"Error\",\r\n        modalText: response,\r\n      });\r\n    }\r\n  }\r\n  handleClearEditor() {\r\n    this.tagsInput.current.value = \"food\";\r\n    this.setState({\r\n      editorToClear: true,\r\n      postTitle: \"\",\r\n      checkedTags: [],\r\n    });\r\n  }\r\n  handlePreviewEditor() {\r\n    this.setState({\r\n      activeTab:\r\n        this.state.activeTab === CMSTABS.CREATE\r\n          ? CMSTABS.PREVIEW\r\n          : CMSTABS.CREATE,\r\n    });\r\n  }\r\n\r\n  async handlePublish() {\r\n    const reply = await publishEntries(this.state.checkedItems);\r\n    if (reply) {\r\n      this.handleListDataRender();\r\n    } else {\r\n      this.setState({\r\n        modalStatus: true,\r\n        modalTitle: \"Error\",\r\n        modalText: \"Something went Wrong\",\r\n        modalType: \"error\",\r\n        checkedItems: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  async handleUnPublish() {\r\n    const reply = await unPublishEntries(this.state.checkedItems);\r\n    if (reply) {\r\n      this.handleListDataRender();\r\n    } else {\r\n      this.setState({\r\n        modalStatus: true,\r\n        modalTitle: \"Error\",\r\n        modalText: \"Something went Wrong\",\r\n        modalType: \"error\",\r\n        checkedItems: [],\r\n      });\r\n    }\r\n  }\r\n  async handleEdit() {\r\n    const length = this.state.checkedItems.length;\r\n    const id = this.state.checkedItems[0];\r\n    if (length === 0) {\r\n      this.setState({\r\n        modalStatus: true,\r\n        modalTitle: \"Wrong Selection\",\r\n        modalText: \"Please choose one item\",\r\n        modalType: \"error\",\r\n      });\r\n    } else if (length > 1) {\r\n      this.setState({\r\n        modalStatus: true,\r\n        modalTitle: \"Wrong Selection\",\r\n        modalText: \"Please choose only one item\",\r\n        modalType: \"error\",\r\n      });\r\n    } else {\r\n      const reply = await getSingleBlogEntry(id);\r\n      if (reply.hasOwnProperty(\"msg\")) {\r\n        this.setState({\r\n          postTitle: reply.body.title,\r\n          editor: reply.body.content,\r\n          activeTab: CMSTABS.CREATE,\r\n          isEdit: true,\r\n          entryEditId: id,\r\n          checkedTags: reply.body.tags,\r\n        });\r\n\r\n        const tagsToDisplay = reply.body.seoTags?.join(\", \");\r\n        this.seoTagsInput.current.value = tagsToDisplay;\r\n      } else {\r\n        this.setState({\r\n          modalStatus: true,\r\n          modalTitle: \"Error\",\r\n          modalText: reply,\r\n          modalType: \"error\",\r\n        });\r\n      }\r\n    }\r\n  }\r\n  handleDelete() {\r\n    this.setState({\r\n      modalStatus: true,\r\n      modalType: \"delete\",\r\n      modalTitle: \"Confirm Deletion\",\r\n      modalText: \"Are you sure you want to delete?\",\r\n    });\r\n  }\r\n  handleConfirm(type) {\r\n    switch (type) {\r\n      case \"delete\":\r\n        this.performDelete();\r\n        break;\r\n      default:\r\n        this.handleDeny();\r\n        break;\r\n    }\r\n  }\r\n  async performDelete() {\r\n    const reply = await deleteEntries(this.state.checkedItems);\r\n    if (reply) {\r\n      this.closeModal();\r\n      this.handleListDataRender();\r\n    } else {\r\n      this.setState({\r\n        modalStatus: true,\r\n        modalType: \"error\",\r\n        modalTitle: \"error\",\r\n        checkedItems: [],\r\n        modalText: \"Something went Wrong\",\r\n      });\r\n    }\r\n  }\r\n  handleDeny() {\r\n    this.closeModal();\r\n  }\r\n  handleSeeAll() {\r\n    this.setState({\r\n      viewMode: CMSVIEWMODES.ALL,\r\n    });\r\n  }\r\n  handleSeeDrafts() {\r\n    this.setState({\r\n      viewMode: CMSVIEWMODES.DRAFTS,\r\n    });\r\n  }\r\n  handleSeePublished() {\r\n    this.setState({\r\n      viewMode: CMSVIEWMODES.PUBLISHED,\r\n    });\r\n  }\r\n\r\n  handleCheckbox(checkedItem, checkedStatus) {\r\n    let newCheckedItems = this.state.checkedItems;\r\n\r\n    if (checkedStatus) {\r\n      newCheckedItems.push(checkedItem);\r\n    } else {\r\n      const index = newCheckedItems.indexOf(checkedItem);\r\n      newCheckedItems.splice(index, 1);\r\n    }\r\n    this.setState({\r\n      checkedItems: newCheckedItems,\r\n    });\r\n  }\r\n\r\n  async handleListDataRender() {\r\n    const headers = await getBlogPostHeaders();\r\n    if (headers.error === \"error\") {\r\n      this.setState({\r\n        modalStatus: true,\r\n        checkedItems: [],\r\n        modalText: headers.errorText,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        checkedItems: [],\r\n        postsToShow: headers.body,\r\n      });\r\n    }\r\n  }\r\n\r\n  async handleShowAllTags() {\r\n    const tags = await getAllTags();\r\n    console.log(tags);\r\n    this.setState({\r\n      tags: tags.body,\r\n      tagMode: \"view\",\r\n    });\r\n  }\r\n  handleCreateNewTag() {\r\n    console.log(\"create\");\r\n    this.setState({\r\n      tagMode: \"create\",\r\n    });\r\n  }\r\n  handleTagEdit(event) {\r\n    this.setState({\r\n      tagInput: event.target.value,\r\n    });\r\n  }\r\n  async handleSaveNewTag() {\r\n    console.log(\"save\");\r\n    const reply = await saveNewTag(this.state.tagInput);\r\n    this.raiseTagsModal(reply, \"save\");\r\n  }\r\n  handleDeleteTags() {\r\n    console.log(\"delete\");\r\n    const reply = deleteTag(this.state.checkedTags);\r\n    this.raiseTagsModal(reply, \"delete\");\r\n  }\r\n\r\n  raiseTagsModal(reply, text) {\r\n    if (reply) {\r\n      this.setState({\r\n        tagsInput: \"\",\r\n        modalStatus: true,\r\n        modalTitle: \"Success\",\r\n        modalText: \"Tag is \" + text,\r\n        modalType: \"error\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        tagsInput: \"\",\r\n        modalStatus: true,\r\n        modalTitle: \"Error\",\r\n        modalText: \"Error\",\r\n        modalType: \"success\",\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTagsCheckbox(checkedTag, checkedStatus) {\r\n    let newCheckedtags = this.state.checkedTags;\r\n    if (checkedStatus) {\r\n      newCheckedtags.push(checkedTag);\r\n    } else {\r\n      const index = newCheckedtags.indexOf(checkedTag);\r\n      newCheckedtags.splice(index, 1);\r\n    }\r\n    this.setState({\r\n      checkedItems: newCheckedtags,\r\n    });\r\n  }\r\n  closeModal() {\r\n    this.setState({\r\n      modalStatus: false,\r\n      modalType: \"\",\r\n      modalTitle: \"\",\r\n      modalText: \"\",\r\n    });\r\n  }\r\n\r\n  async handleOnTagClick(tagId) {\r\n    const index = this.state.checkedTags.indexOf(tagId);\r\n    let newArray = [];\r\n    if (index !== -1) {\r\n      //tag was unclicked\r\n      newArray = [...this.state.checkedTags];\r\n      newArray.splice(index, 1);\r\n    } else {\r\n      //tag was clicked\r\n      newArray = [...this.state.checkedTags, tagId];\r\n    }\r\n    this.setState({\r\n      checkedTags: newArray,\r\n    });\r\n  }\r\n\r\n  /************************************************* */\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Modal\r\n          showStatus={this.state.modalStatus}\r\n          modalTitle={this.state.modalTitle}\r\n          modalText={this.state.modalText}\r\n          modalType={this.state.modalType}\r\n          onConfirm={(type) => this.handleConfirm(type)}\r\n          onDeny={() => this.handleDeny()}\r\n        ></Modal>\r\n        <div className=\"container-row\">\r\n          <div className=\"nav-pane\">\r\n            <Button\r\n              className=\"nav-pane-btn\"\r\n              variant=\"secondary\"\r\n              onClick={() => {\r\n                this.toggleView(CMSTABS.CREATE);\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n\r\n            <Button\r\n              className=\"nav-pane-btn\"\r\n              variant=\"secondary\"\r\n              onClick={() => {\r\n                this.toggleView(CMSTABS.DISPLAY);\r\n              }}\r\n            >\r\n              Display\r\n            </Button>\r\n            <Button\r\n              className=\"nav-pane-btn\"\r\n              variant=\"secondary\"\r\n              onClick={() => {\r\n                this.toggleView(CMSTABS.TAGS_MANAGER);\r\n              }}\r\n            >\r\n              Tags\r\n            </Button>\r\n          </div>\r\n          <div className=\"tab-pane\">\r\n            <CmsMainScreenToolBar\r\n              option={this.state.activeTab}\r\n              onSaveEditor={() => this.handleSaveEditor()}\r\n              onClearEditor={() => this.handleClearEditor()}\r\n              onPreviewEditor={() => this.handlePreviewEditor()}\r\n              onPublish={() => this.handlePublish()}\r\n              onUnPublish={() => this.handleUnPublish()}\r\n              onEdit={() => this.handleEdit()}\r\n              onDelete={() => this.handleDelete()}\r\n              onSeeAll={() => this.handleSeeAll()}\r\n              onSeeDrafts={() => this.handleSeeDrafts()}\r\n              onSeePublished={() => this.handleSeePublished()}\r\n              onCreateNewEntry={() => this.handleCreateNewEntry()}\r\n              onShowAllTags={() => this.handleShowAllTags()}\r\n              onSaveTag={() => this.handleSaveNewTag()}\r\n              onDeleteTag={() => this.handleDeleteTags()}\r\n              onCreateNewTag={() => this.handleCreateNewTag()}\r\n            ></CmsMainScreenToolBar>\r\n\r\n            {this.state.activeTab === CMSTABS.CREATE ? (\r\n              <div id={CMSTABS.CREATE}>\r\n                <CreatePost\r\n                  onChangeEditor={(value) =>\r\n                    this.handleSaveEditorToState(value)\r\n                  }\r\n                  onChangeTitle={(title) => this.handleSaveTitleToState(title)}\r\n                  title={this.state.postTitle}\r\n                  isEditorToClear={this.state.editorToClear}\r\n                  editorValue={this.state.editor}\r\n                ></CreatePost>\r\n                <div className=\"tags-wrapper m-auto p-3 w-75\">\r\n                  <label htmlFor=\"seoTags\" className=\"mr-3\">\r\n                    <strong>SEO tag:</strong>\r\n                  </label>\r\n                  <input\r\n                    ref={this.seoTagsInput}\r\n                    type=\"text\"\r\n                    key=\"seoTags\"\r\n                    id=\"seoTags\"\r\n                    className=\"w-100\"\r\n                    defaultValue=\"food\"\r\n                  ></input>\r\n                  <TagsNavBar\r\n                    tags={this.state.tags}\r\n                    clickedTags={this.state.checkedTags}\r\n                    onClick={(tagId) => this.handleOnTagClick(tagId)}\r\n                  ></TagsNavBar>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n\r\n            {this.state.activeTab === CMSTABS.DISPLAY ? (\r\n              <div id={CMSTABS.DISPLAY}>\r\n                {this.state.postsToShow.length >= 0 ? (\r\n                  <ViewPosts\r\n                    postHeaders={this.state.postsToShow}\r\n                    viewMode={this.state.viewMode}\r\n                    onSeeAll={() => this.handleSeeAll()}\r\n                    onSeePublished={() => this.handleSeePublished()}\r\n                    onSeeDrafts={() => this.handleSeeDrafts()}\r\n                    onPublish={() => this.handlePublish()}\r\n                    onEdit={() => this.handleEdit()}\r\n                    onDelete={() => this.handleDelete()}\r\n                    onCheckbox={(checkedItem, checkedStatus) =>\r\n                      this.handleCheckbox(checkedItem, checkedStatus)\r\n                    }\r\n                    checkedItems={this.state.checkedItems}\r\n                  ></ViewPosts>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {this.state.activeTab === CMSTABS.TAGS_MANAGER ? (\r\n              <div id={CMSTABS.TAGS_MANAGER}>\r\n                {this.state.tagMode === \"view\" ? (\r\n                  <ViewTags\r\n                    tagsToShow={this.state.tags}\r\n                    onTagsCheckbox={(checkedTag, checkedStatus) =>\r\n                      this.handleTagsCheckbox(checkedTag, checkedStatus)\r\n                    }\r\n                    checkedTags={this.state.checkedTags}\r\n                  ></ViewTags>\r\n                ) : (\r\n                  <>\r\n                    <span className=\"pr-3\">\r\n                      <strong>Tag Name:</strong>\r\n                    </span>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"entryName\"\r\n                      className=\"w-25\"\r\n                      placeholder=\"enter a tag name\"\r\n                      value={this.state.tagInput}\r\n                      onChange={this.handleTagEdit}\r\n                    ></input>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default CmsManager;\r\n","import React, { Fragment, Component } from \"react\";\r\nimport Navbar from \"../../containers/NavBar/navbar\";\r\nimport CmsManager from \"../../containers/cms/cmsManager\";\r\nimport \"./cms.scss\";\r\n\r\nclass Cms extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <CmsManager></CmsManager>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Cms;\r\n","const getBaseFrontUrl = () => {\r\n  const reactAppEnv = process.env.REACT_APP_ENV;\r\n  if (reactAppEnv === \"dev\") {\r\n    return process.env.REACT_APP_DEV_FRONTEND;\r\n  } else {\r\n    return process.env.REACT_APP_PROD_FRONTEND;\r\n  }\r\n};\r\n\r\nconst getBaseUrl = () => {\r\n  const reactAppEnv = process.env.NODE_ENV;\r\n  if (reactAppEnv === \"dev\") {\r\n    return process.env.REACT_APP_DEV_SERVER;\r\n  } else {\r\n    return window.location.origin;\r\n  }\r\n};\r\n\r\nexport { getBaseFrontUrl, getBaseUrl };\r\n","import axios from \"axios\";\r\nimport { getBaseUrl } from \"./utils\";\r\n\r\nconst login = async (username, password) => {\r\n  try {\r\n    const data = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    const baseUrl = getBaseUrl();\r\n\r\n    const url = baseUrl + \"/user/login\";\r\n\r\n    const response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    const token = await response.json();\r\n\r\n    if (token.auth) {\r\n      localStorage.setItem(\"token\", token.token);\r\n      return true;\r\n    } else {\r\n      if (localStorage.getItem(\"token\")) {\r\n        localStorage.removeItem(\"token\");\r\n      }\r\n      console.log(token.msg);\r\n      return false;\r\n    }\r\n  } catch (err) {\r\n    console.log(\"error: \", err);\r\n    return false;\r\n  }\r\n};\r\nconst signup = async (name, username, password) => {\r\n  const data = {\r\n    name: name,\r\n    username: username,\r\n    password: password,\r\n  };\r\n  const baseUrl = getBaseUrl();\r\n  const url = baseUrl + \"/user/signup\";\r\n  const response = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-access-token\": localStorage.getItem(\"token\"),\r\n    },\r\n    body: JSON.stringify({ data: data }),\r\n  });\r\n\r\n  const newUser = await response.json();\r\n  console.log(newUser);\r\n  if (newUser) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\nconst saveBlog = async (newEntry, title, tags, seoTags) => {\r\n  try {\r\n    const data = {\r\n      newBlogEntry: newEntry,\r\n      title: title,\r\n      tags: tags,\r\n      seoTags: seoTags,\r\n    };\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/savenewentry\";\r\n    const response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    console.log(\"response: \", response);\r\n\r\n    if (response.signup) return true;\r\n    else return false;\r\n  } catch (err) {\r\n    console.log(\"error: \", err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst updateBlog = async (updatedEntry, title, blogId, tags, seoTags) => {\r\n  try {\r\n    const data = {\r\n      entryToUpdate: updatedEntry,\r\n      title: title,\r\n      id: blogId,\r\n      tags: tags,\r\n      seoTags: seoTags,\r\n    };\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/updateentry\";\r\n\r\n    await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({ data: data }),\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return error;\r\n  }\r\n};\r\n\r\nconst getSingleBlogEntry = async (entryId) => {\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/getnewentry?blogId=\" + entryId;\r\n\r\n    const result = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n    const returnData = await result.json();\r\n    return returnData;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst uploadImageToServer = async (formData) => {\r\n  const config = {\r\n    headers: {\r\n      \"content-type\": \"multipart/form-data\",\r\n      \"x-access-token\": localStorage.getItem(\"token\"),\r\n    },\r\n  };\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/uploadimage\";\r\n    return axios.post(url, formData, config).then((res) => res.data.imageUrl);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst getBlogPostHeaders = async () => {\r\n  const config = {\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      \"x-access-token\": localStorage.getItem(\"token\"),\r\n    },\r\n  };\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/getAllPosts\";\r\n    const resp = await axios.get(url, config);\r\n    return resp.data;\r\n  } catch (error) {\r\n    return { error: \"error\", errorText: error };\r\n  }\r\n};\r\n\r\nconst deleteEntries = async (blogIds) => {\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/deleteEntries\";\r\n    const reply = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify(blogIds),\r\n    });\r\n\r\n    return handleApiBoolReply(reply);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst publishEntries = async (blogIds) => {\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/publishEntries\";\r\n    const reply = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify(blogIds),\r\n    });\r\n\r\n    return handleApiBoolReply(reply);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst unPublishEntries = async (blogIds) => {\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/unPublishEntries\";\r\n    const reply = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify(blogIds),\r\n    });\r\n\r\n    return handleApiBoolReply(reply);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isLogin = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  if (token) {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/isLogin\";\r\n    const reply = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": token,\r\n      },\r\n    });\r\n\r\n    return handleApiBoolReply(reply);\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getAllTags = async () => {\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/getAllTags\";\r\n    const reply = await fetch(url, {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (handleApiBoolReply(reply)) {\r\n      const body = await reply.json();\r\n      return body;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst saveNewTag = async (tag) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  try {\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/saveNewTag\";\r\n    const reply = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": token,\r\n      },\r\n      body: JSON.stringify([tag]),\r\n    });\r\n    console.log(reply);\r\n    return handleApiBoolReply(reply);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return false;\r\n  }\r\n};\r\nconst deleteTag = async (tags) => {\r\n  try {\r\n    console.log(tags);\r\n    const baseUrl = getBaseUrl();\r\n    const url = baseUrl + \"/user/blogmanage/deleteTag\";\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    const reply = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": token,\r\n      },\r\n      body: JSON.stringify(tags),\r\n    });\r\n\r\n    return handleApiBoolReply(reply);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst handleApiBoolReply = (reply) => {\r\n  return reply.status === 200 ? true : false;\r\n};\r\n\r\nexport {\r\n  login,\r\n  signup,\r\n  saveBlog,\r\n  getSingleBlogEntry,\r\n  uploadImageToServer,\r\n  getBlogPostHeaders,\r\n  deleteEntries,\r\n  publishEntries,\r\n  unPublishEntries,\r\n  updateBlog,\r\n  isLogin,\r\n  getAllTags,\r\n  saveNewTag,\r\n  deleteTag,\r\n};\r\n","const CMSVIEWMODES = {\r\n  ALL: \"all\",\r\n  PUBLISHED: \"published\",\r\n  DRAFTS: \"drafts\",\r\n};\r\n\r\nconst CMSTABS = {\r\n  CREATE: \"create\",\r\n  DISPLAY: \"display\",\r\n  PREVIEW: \"preview\",\r\n  TAGS_MANAGER: \"tags\",\r\n};\r\n\r\nconst PAGINATIONTYPE = {\r\n  FIRST:\"first\",\r\n  NEXT:\"next\",\r\n  LAST:\"last\",\r\n  PREV:\"previous\",\r\n  NUMBER:\"number\",\r\n  ELLIPSIS:\"ellipsis\"\r\n}\r\nexport { CMSVIEWMODES, CMSTABS,PAGINATIONTYPE };\r\n"],"sourceRoot":""}